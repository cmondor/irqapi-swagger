# coding: utf-8

"""
    IRQ Balancer API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class IRQDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, irq_cpu_percent_distribution=None, irq_cpu_count_distribution=None, irq_distribution_metric=None, irq_stats=None):
        """
        IRQDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'irq_cpu_percent_distribution': 'list[float]',
            'irq_cpu_count_distribution': 'list[int]',
            'irq_distribution_metric': 'float',
            'irq_stats': 'list[IRQStat]'
        }

        self.attribute_map = {
            'irq_cpu_percent_distribution': 'irq_cpu_percent_distribution',
            'irq_cpu_count_distribution': 'irq_cpu_count_distribution',
            'irq_distribution_metric': 'irq_distribution_metric',
            'irq_stats': 'irq_stats'
        }

        self._irq_cpu_percent_distribution = irq_cpu_percent_distribution
        self._irq_cpu_count_distribution = irq_cpu_count_distribution
        self._irq_distribution_metric = irq_distribution_metric
        self._irq_stats = irq_stats

    @property
    def irq_cpu_percent_distribution(self):
        """
        Gets the irq_cpu_percent_distribution of this IRQDetails.


        :return: The irq_cpu_percent_distribution of this IRQDetails.
        :rtype: list[float]
        """
        return self._irq_cpu_percent_distribution

    @irq_cpu_percent_distribution.setter
    def irq_cpu_percent_distribution(self, irq_cpu_percent_distribution):
        """
        Sets the irq_cpu_percent_distribution of this IRQDetails.


        :param irq_cpu_percent_distribution: The irq_cpu_percent_distribution of this IRQDetails.
        :type: list[float]
        """

        self._irq_cpu_percent_distribution = irq_cpu_percent_distribution

    @property
    def irq_cpu_count_distribution(self):
        """
        Gets the irq_cpu_count_distribution of this IRQDetails.


        :return: The irq_cpu_count_distribution of this IRQDetails.
        :rtype: list[int]
        """
        return self._irq_cpu_count_distribution

    @irq_cpu_count_distribution.setter
    def irq_cpu_count_distribution(self, irq_cpu_count_distribution):
        """
        Sets the irq_cpu_count_distribution of this IRQDetails.


        :param irq_cpu_count_distribution: The irq_cpu_count_distribution of this IRQDetails.
        :type: list[int]
        """

        self._irq_cpu_count_distribution = irq_cpu_count_distribution

    @property
    def irq_distribution_metric(self):
        """
        Gets the irq_distribution_metric of this IRQDetails.


        :return: The irq_distribution_metric of this IRQDetails.
        :rtype: float
        """
        return self._irq_distribution_metric

    @irq_distribution_metric.setter
    def irq_distribution_metric(self, irq_distribution_metric):
        """
        Sets the irq_distribution_metric of this IRQDetails.


        :param irq_distribution_metric: The irq_distribution_metric of this IRQDetails.
        :type: float
        """

        self._irq_distribution_metric = irq_distribution_metric

    @property
    def irq_stats(self):
        """
        Gets the irq_stats of this IRQDetails.


        :return: The irq_stats of this IRQDetails.
        :rtype: list[IRQStat]
        """
        return self._irq_stats

    @irq_stats.setter
    def irq_stats(self, irq_stats):
        """
        Sets the irq_stats of this IRQDetails.


        :param irq_stats: The irq_stats of this IRQDetails.
        :type: list[IRQStat]
        """

        self._irq_stats = irq_stats

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
