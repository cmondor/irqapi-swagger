# coding: utf-8

"""
    IRQ Balancer API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class IRQStat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, irq_num=None, irq_type=None, irq_device=None, irq_cpu_interrupts=None, irq_cpu_interrupt_total=None):
        """
        IRQStat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'irq_num': 'int',
            'irq_type': 'str',
            'irq_device': 'str',
            'irq_cpu_interrupts': 'list[int]',
            'irq_cpu_interrupt_total': 'int'
        }

        self.attribute_map = {
            'irq_num': 'irq_num',
            'irq_type': 'irq_type',
            'irq_device': 'irq_device',
            'irq_cpu_interrupts': 'irq_cpu_interrupts',
            'irq_cpu_interrupt_total': 'irq_cpu_interrupt_total'
        }

        self._irq_num = irq_num
        self._irq_type = irq_type
        self._irq_device = irq_device
        self._irq_cpu_interrupts = irq_cpu_interrupts
        self._irq_cpu_interrupt_total = irq_cpu_interrupt_total

    @property
    def irq_num(self):
        """
        Gets the irq_num of this IRQStat.


        :return: The irq_num of this IRQStat.
        :rtype: int
        """
        return self._irq_num

    @irq_num.setter
    def irq_num(self, irq_num):
        """
        Sets the irq_num of this IRQStat.


        :param irq_num: The irq_num of this IRQStat.
        :type: int
        """

        self._irq_num = irq_num

    @property
    def irq_type(self):
        """
        Gets the irq_type of this IRQStat.


        :return: The irq_type of this IRQStat.
        :rtype: str
        """
        return self._irq_type

    @irq_type.setter
    def irq_type(self, irq_type):
        """
        Sets the irq_type of this IRQStat.


        :param irq_type: The irq_type of this IRQStat.
        :type: str
        """

        self._irq_type = irq_type

    @property
    def irq_device(self):
        """
        Gets the irq_device of this IRQStat.


        :return: The irq_device of this IRQStat.
        :rtype: str
        """
        return self._irq_device

    @irq_device.setter
    def irq_device(self, irq_device):
        """
        Sets the irq_device of this IRQStat.


        :param irq_device: The irq_device of this IRQStat.
        :type: str
        """

        self._irq_device = irq_device

    @property
    def irq_cpu_interrupts(self):
        """
        Gets the irq_cpu_interrupts of this IRQStat.


        :return: The irq_cpu_interrupts of this IRQStat.
        :rtype: list[int]
        """
        return self._irq_cpu_interrupts

    @irq_cpu_interrupts.setter
    def irq_cpu_interrupts(self, irq_cpu_interrupts):
        """
        Sets the irq_cpu_interrupts of this IRQStat.


        :param irq_cpu_interrupts: The irq_cpu_interrupts of this IRQStat.
        :type: list[int]
        """

        self._irq_cpu_interrupts = irq_cpu_interrupts

    @property
    def irq_cpu_interrupt_total(self):
        """
        Gets the irq_cpu_interrupt_total of this IRQStat.


        :return: The irq_cpu_interrupt_total of this IRQStat.
        :rtype: int
        """
        return self._irq_cpu_interrupt_total

    @irq_cpu_interrupt_total.setter
    def irq_cpu_interrupt_total(self, irq_cpu_interrupt_total):
        """
        Sets the irq_cpu_interrupt_total of this IRQStat.


        :param irq_cpu_interrupt_total: The irq_cpu_interrupt_total of this IRQStat.
        :type: int
        """

        self._irq_cpu_interrupt_total = irq_cpu_interrupt_total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
